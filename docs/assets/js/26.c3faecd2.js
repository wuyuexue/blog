(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{287:function(a,t,e){"use strict";e.r(t);var s=e(38),n=Object(s.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"web基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web基础","aria-hidden":"true"}},[a._v("#")]),a._v(" web基础")]),a._v(" "),e("p",[a._v("作为一个web开发者，基于HTML、CSS和JS的web基础知识点，不管是初级码农，还是骨灰级专家，在面试时都可能问到。")]),a._v(" "),e("h2",{attrs:{id:"一个完整的js实现包括啥？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个完整的js实现包括啥？","aria-hidden":"true"}},[a._v("#")]),a._v(" 一个完整的js实现包括啥？")]),a._v(" "),e("p",[a._v("ECMAscript, DOM, BOM")]),a._v(" "),e("h2",{attrs:{id:"doctype有什么作用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doctype有什么作用？","aria-hidden":"true"}},[a._v("#")]),a._v(" DOCTYPE有什么作用？")]),a._v(" "),e("p",[a._v("用于声明文档使用哪种规范，告诉浏览器使用哪个版本的HTML规范来渲染文档。")]),a._v(" "),e("h2",{attrs:{id:"行内、块级、空元素各有哪些？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行内、块级、空元素各有哪些？","aria-hidden":"true"}},[a._v("#")]),a._v(" 行内、块级、空元素各有哪些？")]),a._v(" "),e("ul",[e("li",[a._v("行内元素：a span img input select")]),a._v(" "),e("li",[a._v("块级元素：div ul ol li dl dt dd h1 p")]),a._v(" "),e("li",[a._v("空元素：br hr link meta")])]),a._v(" "),e("h2",{attrs:{id:"标签中src和href的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签中src和href的区别？","aria-hidden":"true"}},[a._v("#")]),a._v(" 标签中src和href的区别？")]),a._v(" "),e("ul",[e("li",[a._v("src 指向外部资源的位置，请求src资源时会将其下载并应用到文档内；")]),a._v(" "),e("li",[a._v("href 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。")])]),a._v(" "),e("h2",{attrs:{id:"html5有哪些优势？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5有哪些优势？","aria-hidden":"true"}},[a._v("#")]),a._v(" HTML5有哪些优势？")]),a._v(" "),e("ul",[e("li",[a._v("更多的语义化标签：header、footer、nav、hgroup、article、section、time等；")]),a._v(" "),e("li",[a._v("对媒体支持：使用audio和video标签避免先前以插件的方式播放音频、视频带来的麻烦；")]),a._v(" "),e("li",[a._v("Canvas绘图：实现在HTML页面中绘制图形和图像，且所有的绘图内容都是使用js来控制的；")]),a._v(" "),e("li",[a._v("SVG绘图技术：矢量图技术，可以无限缩放；")]),a._v(" "),e("li",[a._v("实时通信：HTML5提供了对Web Sockets的支持；")]),a._v(" "),e("li",[a._v("Geolocation： 地理定位，使用浏览器获得客户端所在的地理坐标；")]),a._v(" "),e("li",[a._v("客户端本地存储：会话级客户端存储sessionStorage和跨会话级客户端存储localStorage；")]),a._v(" "),e("li",[a._v("拖放API：在HTML页面中实现GUI程序中的“拖”和“放”操作，提供了七个新事件；")]),a._v(" "),e("li",[a._v("文件离线储存：浏览器就会根据manifest文件的内容下载相应的资源，并进行离线存储。")])]),a._v(" "),e("h2",{attrs:{id:"为什么要重置-浏览器-的css默认属性？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要重置-浏览器-的css默认属性？","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么要重置 浏览器 的css默认属性？")]),a._v(" "),e("p",[a._v("兼容问题，不同浏览器对一些标签的CSS默认值是不同的，如果没对CSS初始化会出现浏览器之间的页面显示差异。")]),a._v(" "),e("h2",{attrs:{id:"css如何计算选择器优先？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css如何计算选择器优先？","aria-hidden":"true"}},[a._v("#")]),a._v(" CSS如何计算选择器优先？")]),a._v(" "),e("ul",[e("li",[a._v("相同权重，定义最近者为准：行内样式 > 内部样式 > 外部样式;")]),a._v(" "),e("li",[a._v("含外部载入样式时，后载入样式覆盖其前面的载入的样式和内部样式;")]),a._v(" "),e("li",[a._v("选择器优先级: 行内样式[1000] > id[100] > class[10] > Tag[1];")]),a._v(" "),e("li",[a._v("在同一组属性设置中，!important 优先级最高，高于行内样式;")]),a._v(" "),e("li",[a._v("继承得到的样式的优先级最低。")])]),a._v(" "),e("h2",{attrs:{id:"介绍使用过的-css-预处理器？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍使用过的-css-预处理器？","aria-hidden":"true"}},[a._v("#")]),a._v(" 介绍使用过的 CSS 预处理器？")]),a._v(" "),e("ul",[e("li",[a._v("CSS 预处理器的原理：为 CSS 增加了一些编程的特性（变量、逻辑判断、函数等），开发时使用这种方式进行页面的样式设计，部署时再编译成普通的 CSS 文件；")]),a._v(" "),e("li",[a._v("使用 CSS 预处理器的好处：可以使 CSS 更加简洁、适应性更强、可读性更佳，无需考虑兼容性；")]),a._v(" "),e("li",[a._v("最常用的 CSS 预处理器语言包括：Sass（SCSS）和 LESS， stylus。")])]),a._v(" "),e("h2",{attrs:{id:"var-const-let-的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-const-let-的区别？","aria-hidden":"true"}},[a._v("#")]),a._v(" var const let 的区别？")]),a._v(" "),e("ul",[e("li",[a._v("初始值：const 声明的变量必须设置初始值，且不能重复赋值。")]),a._v(" "),e("li",[a._v("重复定义：const 和 let 不支持重复定义")]),a._v(" "),e("li",[a._v("const，let 支持块级作用域，有效避免变量覆盖")]),a._v(" "),e("li",[a._v("变量提升：const 和 let 必须先声明再使用，不支持变量提升")])]),a._v(" "),e("h2",{attrs:{id:"原始类型有哪几种？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原始类型有哪几种？","aria-hidden":"true"}},[a._v("#")]),a._v(" 原始类型有哪几种？")]),a._v(" "),e("p",[a._v("在 JS 中，原始类型有：")]),a._v(" "),e("ul",[e("li",[a._v("boolean")]),a._v(" "),e("li",[a._v("null")]),a._v(" "),e("li",[a._v("undefined")]),a._v(" "),e("li",[a._v("number")]),a._v(" "),e("li",[a._v("string")]),a._v(" "),e("li",[a._v("symbol")])]),a._v(" "),e("p",[a._v("其特点有：")]),a._v(" "),e("ul",[e("li",[a._v("原始类型存储的都是值，是没有函数可以调用的，比如 null.toString(), '100'.toString() 可以使用是因为它被强制转换成了 String 内置对象的类型，所以能调用 toString 函数。")]),a._v(" "),e("li",[a._v("JS 的 number 类型是浮点类型的，存在 0.1 + 0.2 !== 0.3 的问题。")])]),a._v(" "),e("h2",{attrs:{id:"null-是对象嘛？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null-是对象嘛？","aria-hidden":"true"}},[a._v("#")]),a._v(" null 是对象嘛？")]),a._v(" "),e("ul",[e("li",[a._v("在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object，这成了 JS 的一个悠久 Bug。")])]),a._v(" "),e("h2",{attrs:{id:"谈谈-typeof-？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈-typeof-？","aria-hidden":"true"}},[a._v("#")]),a._v(" 谈谈 typeof ？")]),a._v(" "),e("ul",[e("li",[a._v("typeof 对于原始类型来说，除了 null 都可以显示正确的类型：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("typeof undefined // 'undefined'\ntypeof null // 'object'\ntypeof 0 // 'number'\ntypeof '0' // 'string'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\n")])])]),e("ul",[e("li",[a._v("typeof 对于引用类型来说，除了函数都会显示 object：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("typeof [] // 'object'\ntypeof {} // 'object'\ntypeof JSON.parse; // 'function'\n")])])]),e("p",[a._v("可以看到，单独使用 typeof 并不能准确判断变量的类型，要想判断一个变量的类型，需要结合多种手段。")]),a._v(" "),e("h2",{attrs:{id:"如何判断一个变量是否为数组？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个变量是否为数组？","aria-hidden":"true"}},[a._v("#")]),a._v(" 如何判断一个变量是否为数组？")]),a._v(" "),e("ul",[e("li",[a._v("内置数组对象上 Array.isArray() 方法；")]),a._v(" "),e("li",[a._v("instanceof 此方法返回一个布尔值;")]),a._v(" "),e("li",[a._v("Array.prototype.isPrototypeOf(): 用于指示对象是否存在于一个对象的原型链中,如果存在返回true，反之返回false;")]),a._v(" "),e("li",[a._v('构造函数 constructor: variable.constructor.toString().indexOf("Array");')]),a._v(" "),e("li",[a._v("Object.prototype.toString.call(variable).indexOf('Array'): 调用toString时会将this对象的[[class]]属性值拿到，而这个属性值就是该对象的真实类型。")])]),a._v(" "),e("h2",{attrs:{id:"this几种不同的使用场景？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this几种不同的使用场景？","aria-hidden":"true"}},[a._v("#")]),a._v(" this几种不同的使用场景？")]),a._v(" "),e("ul",[e("li",[a._v("在构造函数中使用（构造函数本身）")]),a._v(" "),e("li",[a._v("作为对象属性时使用（调用属性的对象）")]),a._v(" "),e("li",[a._v("作为普通函数时使用（window）")]),a._v(" "),e("li",[a._v("call，apply，bind（执行的第一个参数）")])]),a._v(" "),e("h2",{attrs:{id:"函数声明与函数表达式的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数声明与函数表达式的区别？","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数声明与函数表达式的区别？")]),a._v(" "),e("ul",[e("li",[a._v("在Javscript中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；")]),a._v(" "),e("li",[a._v("至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。")])]),a._v(" "),e("h2",{attrs:{id:"谈谈闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈闭包","aria-hidden":"true"}},[a._v("#")]),a._v(" 谈谈闭包")]),a._v(" "),e("p",[a._v("闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的常见方式为在一个函数内部创建另一个函数。")]),a._v(" "),e("p",[a._v("闭包存在的意义主要是让我们可以间接访问函数内部的变量，弥补JS设计上不够安全的缺陷。")]),a._v(" "),e("p",[a._v("最典型的例子就是如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (var i = 0; i < 5; i++) {\n  setTimeout(() => console.log(i), i * 1000);\n}\n")])])]),e("p",[a._v("我们期待是打印出0，1，2，3，4，最后却打印出了 5个5，这是因为 setTimeout 是个异步函数，会先把循环全部执行完毕再打印，此时 i 就是 5了。")]),a._v(" "),e("p",[a._v("解决办法有很多，比如使用ES6的let替代var，实现块级作用域，兼容性最好的还是使用闭包：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (var i = 0; i < 5; i++) {\n  （function(j) {\n      setTimeout(() => console.log(j), j* 1000);\n    )(i)\n}\n")])])]),e("p",[a._v("使用立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 打印 的闭包函数时，就可以使用外部函数的变量 j，从而达到目的。")]),a._v(" "),e("h2",{attrs:{id:"谈谈浅拷贝？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈浅拷贝？","aria-hidden":"true"}},[a._v("#")]),a._v(" 谈谈浅拷贝？")]),a._v(" "),e("p",[a._v("浅拷贝主要是为了解决使用赋值方式复制引用类型的数据时，改变新变量的值，也会影响原有变量的情况，比如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let x = {\n  a: 0\n};\nlet y = x;\ny.a = 6\nconsole.log(x.a) // 6\n")])])]),e("p",[a._v("这是因为使用赋值复制时，JS引擎没有分配新内存，新变量指向的还是原变量所存指针的地址，解决这个问题可以使用浅拷贝：")]),a._v(" "),e("ul",[e("li",[a._v("通过 Object.assign 来实现：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let x = {\n  a: 0\n};\nlet y = Object.assign({}, x);\ny.a = 6\nconsole.log(x.a) // 0\n")])])]),e("ul",[e("li",[a._v("通过展开运算符 ... 来实现：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let x = {\n  a: 0\n};\nlet y = { ...x };\ny.a = 6\nconsole.log(x.a) // 0\n")])])]),e("h2",{attrs:{id:"谈谈深拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈深拷贝","aria-hidden":"true"}},[a._v("#")]),a._v(" 谈谈深拷贝")]),a._v(" "),e("p",[a._v("为何会有深拷贝，这是因为浅拷贝不能解决对象属性中包含对象属性的问题，")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let x = {\n  a: 0，\n  b: {\n    c: 5\n  }\n};\nlet y = { ...x };\ny.b.c = 6\nconsole.log(x.b.c) // 6\n")])])]),e("p",[a._v("解决这个问题的方式我们称为深拷贝：")]),a._v(" "),e("ul",[e("li",[a._v("使用JSON.parse(JSON.stringify()) ：有忽略 undefined和symbol、不能序列化函数及不能解决循环引用的局限性；")]),a._v(" "),e("li",[a._v("使用 MessageChannel：要求所拷贝的对象含有内置类型且不包含函数；")])]),a._v(" "),e("p",[a._v("实现项目中的深拷贝函数，需要考虑好多种边界情况，比如原型链如何处理、DOM 如何处理等，一般都使用 lodash 的深拷贝函数，这里我们只是实现简易版应付面试：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const deepClone = obj => {\n let newObj = Array.isArray(obj) ? [...obj] : { ...obj }\n  Reflect.ownKeys(newObj).forEach(key => {\n    newObj[key] = (typeof obj === 'object' || typeof obj === 'function') && obj !== null ? deepClone(obj[key]) : obj[key];\n  })\n  return newObj;\n}\n\nconst x = {\n  a: 0,\n  b: {\n    c: 5\n  }\n};\nconst y = deepClone(x);\ny.b.c = 6\nconsole.log(x.b.c) // 0\n")])])]),e("h2",{attrs:{id:"谈谈组合继承？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈组合继承？","aria-hidden":"true"}},[a._v("#")]),a._v(" 谈谈组合继承？")]),a._v(" "),e("p",[a._v("组合继承，指的是将原型链和借用构造函数的技术组合到一起, 避免了原型链和借用构造函数的缺点，是JS中最常用的继承模式：")]),a._v(" "),e("ul",[e("li",[a._v("思路是使用原型链实现对原型方法的继承，而通过借用构造函数来实现对实例属性的继承。")]),a._v(" "),e("li",[a._v("既通过在原型上定义方法实现了函数的复用，又能够保证每个实例都有它自己的属性。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('function SuperType(name) {\n  this.name=name;\n  this.colors=["red", "blue", "green"];\n}\nSuperType.prototype.sayName=function() {\n  alert(this.name);\n};\n\nfunction SubType(name, age) {\n  //借用构造函数实现对实例属性的继承\n  SuperType.call(this,name);\n  this.age=age;\n}\n\n//继承方法   使用原型链实现\nSubType.prototype=new SuperType();\nSubType.prototype.constructor=SubType;\nsubType.prototype.sayAge=function() {\n  alert(this.age);\n};\n\nconst instance1=new SubType("mary", 22);\ninstance1.colors.push("black");\n\nalert(instance1.colors);   //red,blue,green,black\ninstance1.sayName();  //mary\ninstance1.sayAge();  //22\n\nconst instance2=new SubType("greg", 25);\nalert(instance2.colors);   //red,blue,green\ninstance2.sayName();  //greg\ninstance2.sayAge();  //25\n')])])]),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),e("p",[a._v("对于工作3年左右的JS工程师，以上的问题，我在几年前的面试过程中基本都被问到，近两年因为看机会基本都是架构师或者负责人，很少会问到。")])])},[],!1,null,null,null);t.default=n.exports}}]);